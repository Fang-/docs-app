The format used for documentation is called "gemtext" (or text/gemini). It is an ultra-minimal markup format developed for the Gemini project, an internet protocol for serving light-weight hypertext, inspired by Gopher.

=> https://gemini.circumlunar.space/ You can read more about Project Gemini here.

A gemtext file looks something like this:

```gemtext
Lorem ipsum dolor sit amet, consectetur adipiscing elit.

# Magna fermentum

Tellus rutrum tellus pellentesque eu tincidunt tortor aliquam nulla facilisi.

=> https://example.com Feugiat in fermentum posuere urna.

## Diam quis enim lobortis

* Rhoncus urna neque viverra justo nec.
* Turpis nunc eget lorem dolor sed viverra ipsum.
* In aliquam sem fringilla ut morbi.

> Velit aliquet sagittis id consectetur purus ut faucibus.

窶義``hoon
|=  [a=@ud b=@ud]
^-  @ud
(add a b)
窶義``

Tellus molestie nunc non blandit massa.

```

The file extension for gemtext is .gmi or .gemini, but only the former (.gmi) is accepted by the %docs app.

The gemtext format is very simple, and only has six line types. All line types apply to the whole line (there is no in-line markup). Also, the line types only apply to the specific line (there are no multi-line blocks), with the single exception of codeblocks, which span multiple lines.

There is no padding between lines by default - two consecutive lines will be displayed:

Like
this.

This means you must explicitly leave empty lines between paragraphs, sections, etc, if you want them to be visually separated. Consecutive empty lines will not be collapsed - three empty lines in source produces three empty lines in the displayed document.

Note also that consecutive lines of text will not be combined into a single paragraph. A paragraph must be written on a single line. You may wish to enable soft wrapping in your editor, or use an language plugin (see the Editors section) which enables it (like gemini-mode in Emacs).



# Line types

Each line type is documented below.


## Links

A line beginning with => denotes a link. The => must be followed with one or more characters of whitespace.

Next comes the target address. There are no restrictions on the address except that it must contain characters which are legal in a URL. It may be a section link, relative link, or full URL. Its protocol needn't be HTTP - an Urbit link would work fine (assuming such link handling is enabled).

After the link address, there may optionally be some whitespace followed by some text. If included, it will constitute the displayed link name. If it's ommitted, the full URL will be used as the link name.

Here's an example of a link with a name:

```gemtext
=> https://example.com This is a link
```

=> https://example.com This is a link

Here's an example without a name:

```gemtext
=> https://example.com
```

=> https://example.com


## Codeblocks

A line beginning with three backticks (```) begins a codeblock, and another line of the same ends it. All lines in between will be included in the codeblock. If the closing triple backticks are ommitted, all remaining text on the page will be included in the codeblock.

The opening backticks may optionally be followed with some text. There may also optionally be whitespace in between the backticks and text. This text is currently not used for anything, but will likely be used to specify the language for syntax highlighting in the future, so it's advisable to include it.

All text between the opening and closing backtick lines will be displayed in a monospace font, and all whitespace will be preserved (including leading and trailing whitespace).

Here's an example of a codeblock:

```gemtext
窶義``hoon
|=  [a=@ud b=@ud]
^-  @ud
(add a b)
窶義``
```

Here's how it will be displayed:

```hoon
|=  [a=@ud b=@ud]
^-  @ud
(add a b)
```


## Headings

A line beginning with 1-3 hashes (#) is a heading. The number of hashes denotes the heading level, with # being the largest and ### being the smallest.

After the hashes comes the text of the heading. There may optionally be whitespace between the hashes and heading text.

As well as being displayed in the document body, an entry in the table of contents will also automatically be created for the heading. Each progressive heading level will be indented more than the last and have less emphasis in the table of contents.

### Example

Here's an example of each heading level:

```gemtext
# Level 1 heading
## Level 2 heading
### Level 3 heading
```

You can see the headings in this document and the table of contents for an idea of how they'd be displayed.


## Lists

Lines beginning with a asterisk (*) denote a list item, and will be displayed with a bullet point. After the asterisk, there must be one or more whitespace characters, and then the text to be displayed.

Here's an example of a list:

```gemtext
* Foo
* Bar
* Baz
```

Here's how it will be displayed:

* Foo
* Bar
* Baz


## Notes

Lines beginning with a right angle bracket (>) will be displayed as notes/asides. There may be whitespace in between the angle bracket and the text.

This syntax is technically for quotes, but quotes will be rare in technical documentation. Instead, their intended use here is for notes, asides, warnings, etc - any remarks you want to draw attention to and break from the flow of the rest of the text.

Here's an example:

```gemtext
> foo bar baz
```

Here's how it will be displayed:

> foo bar baz


## Plain text

Any lines which aren't covered by the types described above will be printed as plain text.

Here's an example:

```gemtext
This is a line of plain text.
```

Here's how it will be displayed:

This is a line of plain text.



# Editors

The simplicity of the gemtext format makes it easy to edit without syntax highlighting, but if you'd like it there are packages for some popular editors.

### Vim

=> https://github.com/SuneelFreimuth/vim-gemtext

### Emacs

=> https://melpa.org/#/gemini-mode

### Nano

=> https://github.com/yzzyx-network/nanorc/blob/master/gemini.nanorc

### VSCode

=> https://marketplace.visualstudio.com/items?itemName=SebastianHiggins.vscode-gemtext
